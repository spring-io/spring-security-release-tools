name: Perform Release

on:
  workflow_call:
    inputs:
      should-perform-release:
        description: Whether the release should be performed.
        required: false
        default: false
        type: string
      project-version:
        description: The project version extracted from the current branch/tag, used to restrict running the workflow to release versions.
        required: true
        type: string
      milestone-repo-url:
        description: The base URL of the milestone repository (e.g. https://repo.spring.io/artifactory/milestone).
        required: true
        type: string
      release-repo-url:
        description: The base URL of the release repository (e.g. https://repo1.maven.org/maven2).
        required: true
        type: string
      artifact-path:
        description: The artifact path within the repository (e.g. org/springframework/security/spring-security-core) used to check for the existence of an artifact version.
        required: true
        type: string
      slack-announcing-id:
        description: The slack announcing id (e.g. spring-security-announcing) to use for slack release notifications.
        required: true
        type: string
    secrets:
      DEVELOCITY_ACCESS_KEY:
        required: false
      GH_ACTIONS_REPO_TOKEN:
        required: true
      SPRING_RELEASE_GCHAT_WEBHOOK_URL:
        required: true

env:
  DEVELOCITY_ACCESS_KEY: ${{ secrets.DEVELOCITY_ACCESS_KEY }}

jobs:
  perform-release:
    name: Perform Release
    runs-on: ubuntu-latest
    timeout-minutes: 90
    if: ${{ inputs.should-perform-release == 'true' && !endsWith(inputs.project-version, '-SNAPSHOT') }}
    env:
      REPO: ${{ github.repository }}
      BRANCH: ${{ github.ref_name }}
      TOKEN: ${{ secrets.GH_ACTIONS_REPO_TOKEN }}
      MILESTONE_REPO: ${{ inputs.milestone-repo-url }}
      RELEASE_REPO: ${{ inputs.release-repo-url }}
      ARTIFACT_PATH: ${{ inputs.artifact-path }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_ACTIONS_REPO_TOKEN }}
      - name: Set up JDK 17
        uses: spring-io/spring-gradle-build-action@v2
      - id: project-version
        name: Extract Project Version
        run: echo "version=$(cat gradle.properties | grep 'version=' | awk -F'=' '{print $2}')" >> $GITHUB_OUTPUT
      - id: next-snapshot-version
        name: Calculate Next Snapshot Version
        env:
          VERSION: ${{ steps.project-version.outputs.version }}
        run: echo "version=$(./gradlew -q getNextSnapshotVersion -PcurrentVersion=$VERSION)" >> $GITHUB_OUTPUT
      - id: previous-release-milestone
        name: Get Previous Release Milestone
        env:
          VERSION: ${{ steps.project-version.outputs.version }}
        run: echo "version=$(./gradlew -q getPreviousReleaseMilestone -PcurrentVersion=$VERSION -PgitHubAccessToken=$TOKEN)" >> $GITHUB_OUTPUT
      - id: previous-snapshot-version
        name: Get Previous Snapshot Version
        env:
          VERSION: ${{ steps.next-snapshot-version.outputs.version }}
        run: echo "version=$(./gradlew -q getPreviousReleaseMilestone -PcurrentVersion=$VERSION -PgitHubAccessToken=$TOKEN)" >> $GITHUB_OUTPUT
      - id: next-release-milestone
        name: Get Next Release Milestone
        env:
          VERSION: ${{ steps.next-snapshot-version.outputs.version }}
        run: echo "version=$(./gradlew -q getNextReleaseMilestone -PcurrentVersion=$VERSION -PgitHubAccessToken=$TOKEN)" >> $GITHUB_OUTPUT
      - id: has-oss-support
        name: Check OSS Support (for current branch)
        run: echo "result=$(./gradlew -q checkBranchHasOssSupport -Pbranch=$BRANCH -PgitHubAccessToken=$TOKEN)" >> $GITHUB_OUTPUT
      - name: Wait for Milestone Artifacts
        if: ${{ contains(steps.project-version.outputs.version, '-RC') || contains(steps.project-version.outputs.version, '-M') }}
        env:
          VERSION: ${{ steps.project-version.outputs.version }}
        run: |
          echo "Wait for artifacts of $REPO@$VERSION to appear on milestone repository ($MILESTONE_REPO)."
          until curl -f -s $MILESTONE_REPO/$ARTIFACT_PATH/$VERSION/ > /dev/null
          do
            sleep 30
            echo "."
          done
          echo "Artifacts for $REPO@$VERSION have been released to milestone repository ($MILESTONE_REPO)."
      - name: Wait for Release Artifacts
        if: ${{ !contains(steps.project-version.outputs.version, '-RC') && !contains(steps.project-version.outputs.version, '-M') }}
        env:
          VERSION: ${{ steps.project-version.outputs.version }}
        run: |
          echo "Wait for artifacts of $REPO@$VERSION to appear on release repository ($RELEASE_REPO)."
          until curl -f -s $RELEASE_REPO/$ARTIFACT_PATH/$VERSION/ > /dev/null
          do
            sleep 30
            echo "."
          done
          echo "Artifacts for $REPO@$VERSION have been released to release repository ($RELEASE_REPO)."
      - name: Create GitHub Release
        env:
          VERSION: ${{ steps.project-version.outputs.version }}
        run: ./gradlew createGitHubRelease -PnextVersion=$VERSION -Pbranch=$BRANCH -PcreateRelease=true -PgitHubAccessToken=$TOKEN
      - name: Update Version
        env:
          VERSION: ${{ steps.next-snapshot-version.outputs.version }}
        run: |
          sed -ie "s/^version=.*/version=$VERSION/" gradle.properties
          git config user.name 'github-actions[bot]'
          git config user.email 'github-actions[bot]@users.noreply.github.com'
          git commit -am "Next development version"
          git push
      - name: Announce Release on GChat
        env:
          VERSION: ${{ steps.project-version.outputs.version }}
          ANNOUNCING_ID: ${{ inputs.slack-announcing-id }}
          WEBHOOK_URL: ${{ secrets.SPRING_RELEASE_GCHAT_WEBHOOK_URL }}
        run: |
          curl -X POST "${WEBHOOK_URL}" -H 'Content-Type: application/json' -d "{ \"text\": \"${ANNOUNCING_ID}\" `${VERSION}` is available now\" }" || true
      - name: Delete Previous Version
        if: ${{ steps.previous-release-milestone.outputs.version != '' }}
        env:
          VERSION: ${{ steps.previous-release-milestone.outputs.version }}
        run: ./gradlew deleteSaganRelease -PpreviousVersion="$VERSION" -PgitHubAccessToken="$TOKEN"
      - name: Create Released Version
        env:
          VERSION: ${{ steps.project-version.outputs.version }}
        run: ./gradlew createSaganRelease -PnextVersion="$VERSION" -PgitHubAccessToken="$TOKEN"
      - name: Close Release Milestone
        env:
          VERSION: ${{ steps.project-version.outputs.version }}
        run: ./gradlew closeMilestone -PnextVersion="$VERSION" -PgitHubAccessToken="$TOKEN"
      - name: Delete Previous Snapshot Version
        if: ${{ steps.previous-snapshot-version.outputs.version != '' }}
        env:
          VERSION: ${{ steps.previous-snapshot-version.outputs.version }}
        run: ./gradlew deleteSaganRelease -PpreviousVersion="$VERSION" -PgitHubAccessToken="$TOKEN"
      - name: Create Next Snapshot Version
        env:
          VERSION: ${{ steps.next-snapshot-version.outputs.version }}
        run: ./gradlew createSaganRelease -PnextVersion="$VERSION" -PgitHubAccessToken="$TOKEN"
      - name: Schedule Next Release (if not already scheduled)
        if: ${{ steps.has-oss-support.outputs.result == 'true' }}
        env:
          VERSION: ${{ steps.next-release-milestone.outputs.version }}
        run: ./gradlew scheduleNextRelease -PnextVersion="$VERSION" -PgitHubAccessToken="$TOKEN"
